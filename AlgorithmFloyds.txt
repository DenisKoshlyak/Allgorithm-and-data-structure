import java.util.*;

class DistPar {
    public int distance;
    public int parentVert;

    public DistPar(int pv, int d) {
        distance = d;
        parentVert = pv;
    }
}

class Vertex
{
    public char label;
    public boolean isInTree;
    public Vertex(char lab) {
        label = lab;
        isInTree = false;
    }
}

class Graph {
    private final int MAX_VERTS = 20;
    private final int INFINITY = 1000000;
    private Vertex vertexList[];
    private int adjMat[][];
    private int nVerts;
    Formatter fmt = new Formatter();

    public Graph() {
        vertexList = new Vertex[MAX_VERTS];
        adjMat = new int[MAX_VERTS][MAX_VERTS];
        nVerts = 0;
    }

    public void addVertex(char lab) {
        vertexList[nVerts++] = new Vertex(lab);
    }

    public void addEdge(int start, int end, int weight) {
        adjMat[start][end] = weight;
    }

    public void findRow(){
        displayTable();
        for(int row = 0; row < nVerts; row++){
            for(int col = 0; col < nVerts; col++){
                if(adjMat[row][col] != 0)
                    findColumn(row, col);
            }
        }
        displayTable();
    }

    private void findColumn(int row, int col){
        for(int i = 0; i < nVerts; i++){
            if(adjMat[i][row] != 0 && (adjMat[i][col] == 0 || (adjMat[i][row] + adjMat[row][col]) < adjMat[i][col]) && i != col){
                adjMat[i][col] = adjMat[i][row] + adjMat[row][col];
            }
        }
    }

    private void displayTable(){
        for(int i = 0; i < nVerts; i++){
            System.out.print(vertexList[i].label + "   ");
            for(int j = 0; j < nVerts; j++){
                if(adjMat[i][j] != INFINITY) {
                    System.out.printf("%4d", adjMat[i][j]);
                    System.out.print(" ");
                }
                else
                    System.out.print("inf ");
            }
            System.out.println();
        }
        System.out.println();
    }
}

class TablePathFromAllVertex {
    public static void main(String[] args) {
        Graph theGraph = new Graph();
        theGraph.addVertex('A');
        theGraph.addVertex('B');
        theGraph.addVertex('C');
        theGraph.addVertex('D');
        theGraph.addVertex('E');
        theGraph.addEdge(0, 1, 50);
        theGraph.addEdge(0, 3, 80);
        theGraph.addEdge(1, 2, 60);
        theGraph.addEdge(1, 3, 90);
        theGraph.addEdge(2, 4, 40);
        theGraph.addEdge(3, 4, 70);
        theGraph.addEdge(4, 1, 50);
        theGraph.findRow();
        System.out.println();
    }
}